?lm
add2 <- function(x, y) {
x + y
}
above10 <- function(x) {
use <- x > 10
x[use]
}
above <- function(x, n = 10) {
use <- x > n
x[use]
}
column_mean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
column_max <- function(x, removeNA = TRUE) {
nc <- ncol(x)
maxs <- numeric(nc)
for(i in 1:nc) {
maxs[i] = max(x[,i],na.rm = removeNA)
}
maxs
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z < 10
z <- 10
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f <- function(m) {
g <- function(n) {
n + z
}
z <- 4
m + g(m)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {}
library(xlsx)
library(rJava)
library(xlsxjars)
install.packages("RMySQL")
R.home()
install.packages("RMySQL")
?RMySQL
ucscDB <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
library(RMySQL)
ucscDB <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDB, "show databases;"); dbDisconnect(ucscDB)
result
hg19 <- dbConnect(MySQL(), user = "genome", db = "hg19", host = "genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19, "affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
hg19 <- dbConnect(MySQL(), user = "genome", db = "hg19", host = "genome-mysql.cse.ucsc.edu")
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
affyMisSmall <- fetch(query, n = 10); dbClearResult(query)
dim(affyMisSmall)
dbDisconnect(hg19())
dbDisconnect(hg19)
library(RMySQL)
?biocLite
source("http://bioconductor.org/biocLite.R")
biocLite("rdhf5")
library(rdh5)
library(rhdf5)
install.packages("installer")
install.packages("installr")
library(installr)
library(httr)
myapp <- oauth_app("twitter", key = "NlFk9YQ8FQU1QgdOwivC8scjW", secret = "qmY8q0hvvjc9tXpOJStx3WDyBJc8Vk7yO8BiJg26XcXz5xVzpY", token = "	403442801-v85YqPlHk39512rPw8wRorzXPggsghOH7b0ce0v4", token_secret = "eDClN35fuS4KlHphKeR7iCBaULkf1qCK0n3KDxi9uP8iS")
myapp <- oauth_app("twitter", key = "NlFk9YQ8FQU1QgdOwivC8scjW", secret = "qmY8q0hvvjc9tXpOJStx3WDyBJc8Vk7yO8BiJg26XcXz5xVzpY", token = "403442801-v85YqPlHk39512rPw8wRorzXPggsghOH7b0ce0v4", token_secret = "eDClN35fuS4KlHphKeR7iCBaULkf1qCK0n3KDxi9uP8iS")
myapp <- oauth_app("twitter", key = "NlFk9YQ8FQU1QgdOwivC8scjW", secret = "qmY8q0hvvjc9tXpOJStx3WDyBJc8Vk7yO8BiJg26XcXz5xVzpY")
sig <- sign_oauth1.0(myapp, token = "403442801-v85YqPlHk39512rPw8wRorzXPggsghOH7b0ce0v4", token_secret = "eDClN35fuS4KlHphKeR7iCBaULkf1qCK0n3KDxi9uP8iS")
homeTL <- GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
homeTL
library(jsonlite)
install.packages("RJSONIO")
library(RJSONIO)
json1 <- content(homeTL)
json2 <- jsonlite::fromJSON(toJSON(json1))
json2[1, 1:4]
json2[1:3, 1:4]
install.packages("foreign")
install.packages("RPostresSQL")
install.packages("RODBC")
install.packages("RMongo")
library("swirl")
rm(list=ls())
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
source()
submit()
play()
?n
?n_distinct
nxt()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View()
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library("swirl'0")
library("swirl")
rm(list=ls())
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
sumbit()
submit()
submit()
?spread
submit()
library(readr)
parse_number("class5")
play()
?mutate
nxt()
submit()
students4
submit
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
rm(list = ls())
library(swirl)
Kyle
swirl()
?Devices
plot(eruptions, waiting)
command(faithful, plot(eruptions, waiting))
plot()
faithful
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file = "myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone ~ Month, airquality)
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red", main = "Ozone and Wind in New York City")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
length(par()0)
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = n)
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
may <- subset(airquality, airquality$Month == 5)
may <- subset(airquality, Month == 5)
points(may$Wind, may$Ozone, col = "blue", cex = "2")
points(may$Wind, may$Ozone, col = "blue", par("cex") = 2)
points(may$Wind, may$Ozone, col = "blue", par("cex") = "2")
points(may$Wind, may$Ozone, col = "blue", par("pch") = "2")
points(may$Wind, may$Ozone, col = "blue", par("pch") = 2)
points(may$Wind, may$Ozone, col = "blue"
)
points(may$Wind, may$Ozone, col = "blue", pch = 17)
notmay <- subet(airquality, Month != 5)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, col = "red", pch = 8)
legend("topright", pch = c(17, 8), col = c("blue", "red"), legend = c("May", "Other Months"))
abline(v = median(airquality$Wind), lyt = 2, lwd = 2)
abline(v = median(airquality$Wind), lty = 2, lwd = 2)
par("mfrow = c(1,2)")
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
install.packages("tigris")
library(tigris)
us <- states()
plot(us)
ri <- counties("RI")
ri20 <- counties("RI", cb = TRUE, resolution = "20m")
plot(ri)
plot(ri20, border = "red", add = TRUE)
fw_zips <- zctas(cb = TRUE, starts_with = "761")
plot(fw_zips)
loving <- roads("TX", "Loving")
plot(loving)
sts <- c("DC", "MD", "VA")
combined <- rbind_tigris(lapply(sts, function(x) {tracts(x, cb = TRUE)}))
plot(combined)
fileUrl <- "http://personal.tcu.edu/kylewalker/data/txlege.csv"
df <- read.csv(fileUrl, stringsAsFactors = FALSE)
districts <- state_legislative_districts("TX", house = "lower", cb = "TRUE")
txlege <- geo_join(districts, df, "NAME", "District")
head(df)
dim(df)
txlege$color <- ifelse(txlege$Party == "R", "red", "blue")
plot(txlege, col = txlege$color)
legend("topright", legend = c("Republican", "Democrat"), fill = c("red", "blue"))
install.packages("censusapi")
install.packages("tidyverse")
install.packages("tmap")
x <- rnorm(100)
hist(x)
y <- rnorm(100)
plot(x,y)
z <- rnorm(100)
plot(x, z)
plot(x, y)
par(mar = c(2, 2, 2, 2))
plot(x, y)
par(mar = c(4, 4, 2, 2))
plot(x, y)
plot(x, y, pch = 20)
plot(x, y, pch = 19)
plot(x, y, pch = 2)
plot(x, y, pch = 3)
plot(x, y, pch = 4)
example(points)
plot(x, y, pch = 20)
x <- rnorm(100)
y <- rnorm(100)
plot(x, y, pch = 20)
title("Scatterplot")
text(-2, -2, "label")
legend("topleft", legend = "Data", pch = 20)
fit <- lm(y ~ x)
abline(fit)
abline(fit, lwd = 3)
abline(fit, lwd = 3, col = "blue")
plot(x, y, xlab = "Weight", ylab = "Height", main = "Scatterplot", pch = 20)
legend("topright", legend = "Data", pch = 20)
abline(fit, lwd = 3, col = "red")
z <- rpois(100, 2)
par(mfrow = c(2, 1))
plot(x, y, pch = 20)
plot(x, z, pch = 19)
par("mar")
par(mar = c(2, 2, 1, 1))
plot(x, y, pch = 20)
plot(x, z, pch = 19)
par(mfrow = c(1, 2))
plot(x, y, pch = 20)
plot(x, z, pch = 19)
par(mar = c(4, 4, 2, 2))
plot(x, y, pch = 20)
plot(x, z, pch = 19)
par(mfrow = c(2,2))
plot(x, y)
plot(x, z)
plot(z, x)
plot(y, x)
par(mfcol = c(2, 2))
plot(x, y)
plot(x, z)
plot(z, x)
plot(y, x)
par(mfrow = c(1, 1))
x <- rnorm(100)
y <- x + rnorm(100)
g <- gl(2, 50)
g <- gl(2, 50, labels = c("Male", "Female"))
str(g)
plot(x, y)
plot(x, y, type = "n")
points(x[g == "Male"], y[g == "Male"], col = "green")
points(x[g == "Female"], y[g == "Female"], col = "blue")
?gl
length(g)
setwd("~/Coursera/Data_Science/Course_Projects/4_Exploratory_Data_Analysis/ExData_Plotting1")
## Read in the data
data <- read.table("./data/household_power_consumption.txt", header = TRUE, sep = ";", na.strings = "?", colClasses = c("character", "character", rep("numeric", 7)))
timeStamp <- paste(data$Date, data$Time)
data$timeStamp <- dmy_hms(timeStamp)
powerData <- tbl_df(data)
powerData$Date <- dmy(powerData$Date)
powerDataFeb <- subset(powerData, Date > as.Date("2007-01-31") & Date < as.Date("2007-02-03"))
library(lubridate)
library(dplyr)
## Read in the data
data <- read.table("./data/household_power_consumption.txt", header = TRUE, sep = ";", na.strings = "?", colClasses = c("character", "character", rep("numeric", 7)))
timeStamp <- paste(data$Date, data$Time)
data$timeStamp <- dmy_hms(timeStamp)
powerData <- tbl_df(data)
powerData$Date <- dmy(powerData$Date)
powerDataFeb <- subset(powerData, Date > as.Date("2007-01-31") & Date < as.Date("2007-02-03"))
powerDataFeb
hms(powerDataFeb$Time)
class(hms(powerDataFeb$Time))
hist(powerDataFeb$Global_active_power)
par(col = "red")
hist(powerDataFeb$Global_active_power)
par(col = "red")
hist(powerDataFeb$Global_active_power)
hist(powerDataFeb$Global_active_power)
hist(powerDataFeb$Global_active_power, col = "red")
hist(powerDataFeb$Global_active_power, col = "red", main = "Global Active Power", xlab = "Global Active Power (kilowatts)")
## Make plot 1 (Histogram of Global Active Power) using R Base Plotting
png("plot1.png")
hist(powerDataFeb$Global_active_power, col = "red", main = "Global Active Power", xlab = "Global Active Power (kilowatts)")
dev.off()
hist(powerDataFeb$Global_active_power, col = "red", main = "Global Active Power", xlab = "Global Active Power (kilowatts)")
plot(powerDataFeb$timeStamp, powerDataFeb$Global_active_power)
par(col = "black")
plot(powerDataFeb$timeStamp, powerDataFeb$Global_active_power)
plot(powerDataFeb$timeStamp, powerDataFeb$Global_active_power, ylab = "Global Active Power (kilowatts)")
plot(powerDataFeb$timeStamp, powerDataFeb$Global_active_power, ylab = "Global Active Power (kilowatts)", xlab = "")
lines(powerDataFeb$timeStamp[order(powerDataFeb$timeStamp)], powerDataFeb$Global_active_power[order(powerDataFeb$Global_active_power)], xlim = range(powerDataFeb$timeStamp), ylim = range(powerDataFeb$Global_active_power), pch = 16)
example(points)
plot(powerDataFeb$timeStamp, powerDataFeb$Global_active_power, ylab = "Global Active Power (kilowatts)", xlab = "", pch = 20)
lines(powerDataFeb$timeStamp[order(powerDataFeb$timeStamp)], powerDataFeb$Global_active_power[order(powerDataFeb$Global_active_power)], xlim = range(powerDataFeb$timeStamp), ylim = range(powerDataFeb$Global_active_power), pch = 16)
activePowerData <- select(powerDataFeb, timeStamp
activePowerData <- select(powerDataFeb, timeStamp, Global_active_power)
activePowerData
plot(activePowerData)
lines(stats::lowess(activePowerData))
data(cars)
cars
plot(powerDataFeb$timeStamp, powerDataFeb$Global_active_power, type = "n")
lines(powerDataFeb$timeStamp, powerDataFeb$Global_active_power, type = "l")
## Make plot 1 (Global Active Power over time) using R Base Plotting
png("plot2.png")
plot(powerDataFeb$timeStamp, powerDataFeb$Global_active_power, ylab = "Global Active Power (kilowatts)", xlab = "", type = "n")
lines(powerDataFeb$timeStamp, powerDataFeb$Global_active_power, type = "l")
dev.off()
powerDataFeb
plot(powerDataFeb$timeStamp, powerDataFeb$Sub_metering_1, ylab = "Energy Sub-metering", xlab = "", type = "n")
plot(powerDataFeb$timeStamp, powerDataFeb$Sub_metering_2, ylab = "Energy Sub-metering", xlab = "", type = "n")
plot(powerDataFeb$timeStamp, powerDataFeb$Sub_metering_3, ylab = "Energy Sub-metering", xlab = "", type = "n")
plot(powerDataFeb$timeStamp, powerDataFeb$Sub_metering_1, ylab = "Energy Sub-metering", xlab = "", type = "n")
lines(powerDataFeb$timeStamp, powerDataFeb$Sub_metering_1, type = "l", col = "black")
lines(powerDataFeb$timeStamp, powerDataFeb$Sub_metering_2, type = "l", col = "red")
lines(powerDataFeb$timeStamp, powerDataFeb$Sub_metering_3, type = "l", col = "blue")
legend("topright", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
?legend
plot(powerDataFeb$timeStamp, powerDataFeb$Sub_metering_1, ylab = "Energy Sub-metering", xlab = "", type = "n")
lines(powerDataFeb$timeStamp, powerDataFeb$Sub_metering_1, type = "l", col = "black")
lines(powerDataFeb$timeStamp, powerDataFeb$Sub_metering_2, type = "l", col = "red")
lines(powerDataFeb$timeStamp, powerDataFeb$Sub_metering_3, type = "l", col = "blue")
legend("topright", legend = c("sub1", "sub2", "sub3", col = c("black", "red", "blue"), pch = c(3, 3, 3)))
legend("topright", legend = c("sub1", "sub2", "sub3"), col = c("black", "red", "blue"), pch = c(3, 3, 3))
legend("topright", legend = c("sub1", "sub2", "sub3"), col = c("black", "red", "blue"), pch = c(95, 95, 95))
legend("topright", legend = c("sub1", "sub2", "sub3"), col = c("black", "red", "blue"), pch = c("95", "95", "95"))
## Make plot 3 (Sub-meter readings over time) using R Base Plotting
png("plot3.png")
plot(powerDataFeb$timeStamp, powerDataFeb$Sub_metering_1, ylab = "Energy Sub-metering", xlab = "", type = "n")
lines(powerDataFeb$timeStamp, powerDataFeb$Sub_metering_1, type = "l", col = "black")
lines(powerDataFeb$timeStamp, powerDataFeb$Sub_metering_2, type = "l", col = "red")
lines(powerDataFeb$timeStamp, powerDataFeb$Sub_metering_3, type = "l", col = "blue")
legend("topright", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), col = c("black", "red", "blue"), pch = (95, 95, 95))
dev.off()
legend("topright", legend = c("sub1", "sub2", "sub3"), col = c("black", "red", "blue"), pch = c(95, 95, 95))
legend("topright", legend = c("sub1", "sub2", "sub3"), col = c("black", "red", "blue"), pch = {95 95 95}
legend("topright", legend = c("sub1", "sub2", "sub3"), col = c("black", "red", "blue"), pch = {95 95 95})
legend("topright", legend = c("sub1", "sub2", "sub3"), col = c("black", "red", "blue"), pch = (95 95 95)
legend("topright", legend = c("sub1", "sub2", "sub3"), col = c("black", "red", "blue"), pch = c(95 95 95)
legend("topright", legend = c("sub1", "sub2", "sub3"), col = c("black", "red", "blue"), pch = c(95, 95, 95)
)
legend("topright", legend = c("sub1", "sub2", "sub3"), col = c("black", "red", "blue"), pch = c(95, 95, 95))
?legend
## Make plot 3 (Sub-meter readings over time) using R Base Plotting
png("plot3.png")
plot(powerDataFeb$timeStamp, powerDataFeb$Sub_metering_1, ylab = "Energy Sub-metering", xlab = "", type = "n")
lines(powerDataFeb$timeStamp, powerDataFeb$Sub_metering_1, type = "l", col = "black")
lines(powerDataFeb$timeStamp, powerDataFeb$Sub_metering_2, type = "l", col = "red")
lines(powerDataFeb$timeStamp, powerDataFeb$Sub_metering_3, type = "l", col = "blue")
legend("topright", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), pch = c(95, 95, 95), col = c("black", "red", "blue"))
dev.off()
powerDataFeb
par(mfrow = c(2, 2))
## Top left plot
plot(powerDataFeb$timeStamp, powerDataFeb$Global_active_power, ylab = "Global Active Power (kilowatts)", xlab = "", type = "n")
lines(powerDataFeb$timeStamp, powerDataFeb$Global_active_power, type = "l")
plot(powerDataFeb$timeStamp, powerDataFeb$Voltage, ylab = "Voltage", xlab = "datetime", type = "n")
lines(powerDataFeb$timeStamp, powerDataFeb$Voltage, type = "l")
par(mfrow = c(2, 2))
## Top left plot
plot(powerDataFeb$timeStamp, powerDataFeb$Global_active_power, ylab = "Global Active Power (kilowatts)", xlab = "", type = "n")
lines(powerDataFeb$timeStamp, powerDataFeb$Global_active_power, type = "l")
## Top right plot
plot(powerDataFeb$timeStamp, powerDataFeb$Voltage, ylab = "Voltage", xlab = "datetime", type = "n")
lines(powerDataFeb$timeStamp, powerDataFeb$Voltage, type = "l")
## Bottom left plot
plot(powerDataFeb$timeStamp, powerDataFeb$Sub_metering_1, ylab = "Energy Sub-metering", xlab = "", type = "n")
lines(powerDataFeb$timeStamp, powerDataFeb$Sub_metering_1, type = "l", col = "black")
lines(powerDataFeb$timeStamp, powerDataFeb$Sub_metering_2, type = "l", col = "red")
lines(powerDataFeb$timeStamp, powerDataFeb$Sub_metering_3, type = "l", col = "blue")
legend("topright", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), pch = c(95, 95, 95), col = c("black", "red", "blue"))
## Bottom right plot
plot(powerDataFeb$timeStamp, powerDataFeb$Global_reactive_power, ylab = "Global_reactive_power", xlab = "datetime", type = "n")
lines(powerDataFeb$timeStamp, powerDataFeb$Global_reactive_power, type = "l")
png("plot4.png")
par(mfrow = c(2, 2))
## Top left plot
plot(powerDataFeb$timeStamp, powerDataFeb$Global_active_power, ylab = "Global Active Power (kilowatts)", xlab = "", type = "n")
lines(powerDataFeb$timeStamp, powerDataFeb$Global_active_power, type = "l")
## Top right plot
plot(powerDataFeb$timeStamp, powerDataFeb$Voltage, ylab = "Voltage", xlab = "datetime", type = "n")
lines(powerDataFeb$timeStamp, powerDataFeb$Voltage, type = "l")
## Bottom left plot
plot(powerDataFeb$timeStamp, powerDataFeb$Sub_metering_1, ylab = "Energy Sub-metering", xlab = "", type = "n")
lines(powerDataFeb$timeStamp, powerDataFeb$Sub_metering_1, type = "l", col = "black")
lines(powerDataFeb$timeStamp, powerDataFeb$Sub_metering_2, type = "l", col = "red")
lines(powerDataFeb$timeStamp, powerDataFeb$Sub_metering_3, type = "l", col = "blue")
##legend("topright", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), pch = c(95, 95, 95), col = c("black", "red", "blue"))
## Bottom right plot
plot(powerDataFeb$timeStamp, powerDataFeb$Global_reactive_power, ylab = "Global_reactive_power", xlab = "datetime", type = "n")
lines(powerDataFeb$timeStamp, powerDataFeb$Global_reactive_power, type = "l")
